{"version":3,"sources":["../src/TypesenseInstantsearchAdapter.js"],"names":["TypesenseInstantsearchAdapter","options","updateConfiguration","searchClient","clearCache","search","instantsearchRequests","searchTypesenseAndAdapt","searchForFacetValues","searchTypesenseForFacetValuesAndAdapt","_adaptAndPerformTypesenseRequest","typesenseResponse","adaptedResponses","results","map","typesenseResult","index","_validateTypesenseResult","responseAdapter","SearchResponseAdapter","configuration","adapt","console","error","FacetSearchResponseAdapter","requestAdapter","SearchRequestAdapter","typesenseClient","request","TypesenseSearchClient","server","Configuration","validate","Error","code","hits","grouped_hits"],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport { Configuration } from \"./Configuration\";\nimport { SearchClient as TypesenseSearchClient } from \"typesense\";\nimport { SearchRequestAdapter } from \"./SearchRequestAdapter\";\nimport { SearchResponseAdapter } from \"./SearchResponseAdapter\";\nimport { FacetSearchResponseAdapter } from \"./FacetSearchResponseAdapter\";\n\nexport default class TypesenseInstantsearchAdapter {\n  constructor(options) {\n    this.updateConfiguration(options);\n    this.searchClient = {\n      clearCache: () => this.clearCache(),\n      search: (instantsearchRequests) => this.searchTypesenseAndAdapt(instantsearchRequests),\n      searchForFacetValues: (instantsearchRequests) =>\n        this.searchTypesenseForFacetValuesAndAdapt(instantsearchRequests),\n    };\n  }\n\n  async searchTypesenseAndAdapt(instantsearchRequests) {\n    let typesenseResponse;\n    try {\n      typesenseResponse = await this._adaptAndPerformTypesenseRequest(instantsearchRequests);\n\n      const adaptedResponses = typesenseResponse.results.map((typesenseResult, index) => {\n        this._validateTypesenseResult(typesenseResult);\n        const responseAdapter = new SearchResponseAdapter(\n          typesenseResult,\n          instantsearchRequests[index],\n          this.configuration\n        );\n        return responseAdapter.adapt();\n      });\n\n      return {\n        results: adaptedResponses,\n      };\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  }\n\n  async searchTypesenseForFacetValuesAndAdapt(instantsearchRequests) {\n    let typesenseResponse;\n    try {\n      typesenseResponse = await this._adaptAndPerformTypesenseRequest(instantsearchRequests);\n\n      const adaptedResponses = typesenseResponse.results.map((typesenseResult, index) => {\n        this._validateTypesenseResult(typesenseResult);\n        const responseAdapter = new FacetSearchResponseAdapter(\n          typesenseResult,\n          instantsearchRequests[index],\n          this.configuration\n        );\n        return responseAdapter.adapt();\n      });\n\n      return adaptedResponses;\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  }\n\n  async _adaptAndPerformTypesenseRequest(instantsearchRequests) {\n    const requestAdapter = new SearchRequestAdapter(instantsearchRequests, this.typesenseClient, this.configuration);\n    const typesenseResponse = await requestAdapter.request();\n    return typesenseResponse;\n  }\n\n  clearCache() {\n    this.typesenseClient = new TypesenseSearchClient(this.configuration.server);\n    return this.searchClient;\n  }\n\n  updateConfiguration(options) {\n    this.configuration = new Configuration(options);\n    this.configuration.validate();\n    this.typesenseClient = new TypesenseSearchClient(this.configuration.server);\n    return true;\n  }\n\n  _validateTypesenseResult(typesenseResult) {\n    if (typesenseResult.error) {\n      throw new Error(`${typesenseResult.code} - ${typesenseResult.error}`);\n    }\n    if (!typesenseResult.hits && !typesenseResult.grouped_hits) {\n      throw new Error(`Did not find any hits. ${typesenseResult.code} - ${typesenseResult.error}`);\n    }\n  }\n}\n"],"file":"TypesenseInstantsearchAdapter.js"}