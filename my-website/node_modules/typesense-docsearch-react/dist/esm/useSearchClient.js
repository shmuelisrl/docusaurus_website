import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import React from 'react';
import { SearchClient as TypesenseSearchClient } from 'typesense';
import { SearchResponseAdapter as TypesenseSearchResponseAdapter } from 'typesense-instantsearch-adapter/lib/SearchResponseAdapter';
export function useSearchClient(typesenseServerConfig, transformSearchClient) {
  return React.useMemo(function () {
    var typesense = new TypesenseSearchClient(typesenseServerConfig);
    var client = {
      search: function () {
        var _search = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {
          var _ref2, request, response, typesenseSearchResponseAdapter;

          return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _ref2 = _slicedToArray(_ref, 1), request = _ref2[0];
                  _context.next = 3;
                  return typesense.multiSearch.perform({
                    searches: [request]
                  });

                case 3:
                  response = _context.sent;
                  typesenseSearchResponseAdapter = new TypesenseSearchResponseAdapter(response.results[0], {
                    params: _objectSpread(_objectSpread({}, request.params), {}, {
                      highlightPreTag: '<mark>',
                      highlightPostTag: '</mark>'
                    })
                  }, {
                    geoLocationField: ''
                  });
                  return _context.abrupt("return", {
                    results: [typesenseSearchResponseAdapter.adapt()]
                  });

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        function search(_x) {
          return _search.apply(this, arguments);
        }

        return search;
      }()
    };
    return transformSearchClient(client);
  }, [transformSearchClient, typesenseServerConfig]);
}